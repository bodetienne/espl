<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Candidature My Digital School</title>
		{% block stylesheets %}
			<link rel="stylesheet" type="text/css" href="{{ asset('../css/normalize.css') }}" media="all" />
			<link rel="stylesheet" type="text/css" href="{{ asset('../css/style-mds.css') }}" media="all" />
			<link rel="stylesheet" type="text/css" href="{{ asset('../css/style-mds-fouzi.css') }}" media="all" />
			<link rel="stylesheet" type="text/css" href="{{ asset('../css/style-mds-eva.css') }}" media="all" />
			<link rel="stylesheet" type="text/css" href="{{ asset('../css/style-mds-structure.css') }}" media="all" />
			<link rel="stylesheet" type="text/css" href="{{ asset('../css/style-mds-header-footer.css') }}" media="all" />
			<link rel="stylesheet" type="text/css" href="{{ asset('../css/style-martin.css') }}" media="all" />
			<link rel="icon" type="img" href="{{ asset('../elements/favicon.ico.png') }}"/>
		{% endblock %}

		{% block javascripts %}
		<script src="https://code.createjs.com/createjs-2015.11.26.min.js"></script>
		<script src="{{ asset('coucou.js') }}"></script>
		<script>
		var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;
		function init() {
			canvas = document.getElementById("canvas");
			anim_container = document.getElementById("animation_container");
			dom_overlay_container = document.getElementById("dom_overlay_container");
			var comp=AdobeAn.getComposition("DD865F2F99AB8A4C8BD29322272E6B16");
			var lib=comp.getLibrary();
			handleComplete({},comp);
		}
		function handleComplete(evt,comp) {
			//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
			var lib=comp.getLibrary();
			var ss=comp.getSpriteSheet();
			exportRoot = new lib.coucou();
			stage = new lib.Stage(canvas);
			stage.enableMouseOver();
			//Registers the "tick" event listener.
			fnStartAnimation = function() {
				stage.addChild(exportRoot);
				createjs.Ticker.setFPS(lib.properties.fps);
				createjs.Ticker.addEventListener("tick", stage)
				stage.addEventListener("tick", handleTick)
				function getProjectionMatrix(container, totalDepth) {
					var focalLength = 528.25;
					var projectionCenter = { x : lib.properties.width/2, y : lib.properties.height/2 };
					var scale = (totalDepth + focalLength)/focalLength;
					var scaleMat = new createjs.Matrix2D;
					scaleMat.a = 1/scale;
					scaleMat.d = 1/scale;
					var projMat = new createjs.Matrix2D;
					projMat.tx = -projectionCenter.x;
					projMat.ty = -projectionCenter.y;
					projMat = projMat.prependMatrix(scaleMat);
					projMat.tx += projectionCenter.x;
					projMat.ty += projectionCenter.y;
					return projMat;
				}
				function handleTick(event) {
					var cameraInstance = exportRoot.___camera___instance;
					if(cameraInstance !== undefined && cameraInstance.pinToObject !== undefined)
					{
						cameraInstance.x = cameraInstance.pinToObject.x + cameraInstance.pinToObject.pinOffsetX;
						cameraInstance.y = cameraInstance.pinToObject.y + cameraInstance.pinToObject.pinOffsetY;
						if(cameraInstance.pinToObject.parent !== undefined && cameraInstance.pinToObject.parent.depth !== undefined)
						cameraInstance.depth = cameraInstance.pinToObject.parent.depth + cameraInstance.pinToObject.pinOffsetZ;
					}
					applyLayerZDepth(exportRoot);
				}
				function applyLayerZDepth(parent)
				{
					var cameraInstance = parent.___camera___instance;
					var focalLength = 528.25;
					var projectionCenter = { 'x' : 0, 'y' : 0};
					if(parent === exportRoot)
					{
						var stageCenter = { 'x' : lib.properties.width/2, 'y' : lib.properties.height/2 };
						projectionCenter.x = stageCenter.x;
						projectionCenter.y = stageCenter.y;
					}
					for(child in parent.children)
					{
						var layerObj = parent.children[child];
						if(layerObj == cameraInstance)
							continue;
						applyLayerZDepth(layerObj, cameraInstance);
						if(layerObj.layerDepth === undefined)
							continue;
						if(layerObj.currentFrame != layerObj.parent.currentFrame)
						{
							layerObj.gotoAndPlay(layerObj.parent.currentFrame);
						}
						var matToApply = new createjs.Matrix2D;
						var cameraMat = new createjs.Matrix2D;
						var totalDepth = layerObj.layerDepth ? layerObj.layerDepth : 0;
						var cameraDepth = 0;
						if(cameraInstance && !layerObj.isAttachedToCamera)
						{
							var mat = cameraInstance.getMatrix();
							mat.tx -= projectionCenter.x;
							mat.ty -= projectionCenter.y;
							cameraMat = mat.invert();
							cameraMat.prependTransform(projectionCenter.x, projectionCenter.y, 1, 1, 0, 0, 0, 0, 0);
							cameraMat.appendTransform(-projectionCenter.x, -projectionCenter.y, 1, 1, 0, 0, 0, 0, 0);
							if(cameraInstance.depth)
								cameraDepth = cameraInstance.depth;
						}
						if(layerObj.depth)
						{
							totalDepth = layerObj.depth;
						}
						//Offset by camera depth
						totalDepth -= cameraDepth;
						if(totalDepth < -focalLength)
						{
							matToApply.a = 0;
							matToApply.d = 0;
						}
						else
						{
							if(layerObj.layerDepth)
							{
								var sizeLockedMat = getProjectionMatrix(parent, layerObj.layerDepth);
								if(sizeLockedMat)
								{
									sizeLockedMat.invert();
									matToApply.prependMatrix(sizeLockedMat);
								}
							}
							matToApply.prependMatrix(cameraMat);
							var projMat = getProjectionMatrix(parent, totalDepth);
							if(projMat)
							{
								matToApply.prependMatrix(projMat);
							}
						}
						layerObj.transformMatrix = matToApply;
					}
				}
			}
			//Code to support hidpi screens and responsive scaling.
			function makeResponsive(isResp, respDim, isScale, scaleType) {
				var lastW, lastH, lastS=1;
				window.addEventListener('resize', resizeCanvas);
				resizeCanvas();
				function resizeCanvas() {
					var w = lib.properties.width, h = lib.properties.height;
					var iw = window.innerWidth, ih=window.innerHeight;
					var pRatio = window.devicePixelRatio || 1, xRatio=iw/w, yRatio=ih/h, sRatio=1;
					if(isResp) {
						if((respDim=='width'&&lastW==iw) || (respDim=='height'&&lastH==ih)) {
							sRatio = lastS;
						}
						else if(!isScale) {
							if(iw<w || ih<h)
								sRatio = Math.min(xRatio, yRatio);
						}
						else if(scaleType==1) {
							sRatio = Math.min(xRatio, yRatio);
						}
						else if(scaleType==2) {
							sRatio = Math.max(xRatio, yRatio);
						}
					}
					canvas.width = w*pRatio*sRatio;
					canvas.height = h*pRatio*sRatio;
					canvas.style.width = dom_overlay_container.style.width = anim_container.style.width =  w*sRatio+'px';
					canvas.style.height = anim_container.style.height = dom_overlay_container.style.height = h*sRatio+'px';
					stage.scaleX = pRatio*sRatio;
					stage.scaleY = pRatio*sRatio;
					lastW = iw; lastH = ih; lastS = sRatio;
					stage.tickOnUpdate = false;
					stage.update();
					stage.tickOnUpdate = true;
				}
			}
			makeResponsive(true,'both',true,1);
			AdobeAn.compositionLoaded(lib.properties.id);
			fnStartAnimation();
		}
		</script>
		{% endblock %}

	</head>

	<body onload="init();">
		<main class="form-main">
			<div class="block-main">
					<div class="aside">
						<div class="fond-martin">
							{% include "header.html.twig" %}
							<!-- martin -->
							<div id="animation_container">
								<canvas id="canvas" width="823" height="980"></canvas>
								<div id="dom_overlay_container">
								</div>
							</div>
							<!--  -->
							<div class="mur">
								<div class="col-1"></div>
								<div class="col-2">
									<div class="blanc"></div>
									<div class="bleu"></div>
								</div>
								<div class="col-3"></div>
							</div>
							<div class="trottoir">
								<div class="ligne-1"></div>
								<div class="ligne-2"></div>
							</div>
							<div class="sol"></div>
						</div>
					</div>
					<div class="main connaissance-ecole">
						{% include "barre-progression.html.twig" %}
						<h1 class="titre-mds">Comment as-tu connu l'école ?</h1>
						<div class="connaissance">
							{{ form_start(form) }}
							<div class="champ-internet">
								{#{{ form_widget(formTitle.radioSet)  }}#}
								{{ form_label(form.connaissanceEcole, 'Internet (Précise : moteur de recherche, sites...', {'label_attr': {'class': 'container internet'}}) }}
							</div>
							<div class="champ-forum">
								{#{{ form_widget(formTitle.radioSet)  }}#}
								{{ form_label(form.connaissanceEcole, 'Forum Lycée', {'label_attr': {'class': 'container forum'}}) }}
							</div>
							<div class="champ-relation">
								{#{{ form_widget(formTitle.radioSet)  }}#}
								{{ form_label(form.connaissanceEcole, 'Bouche à oreille / relation / étudiant (Précise)', {'label_attr': {'class': 'container relation'}}) }}
							</div>
							<div class="champ-salon">
								{#{{ form_widget(formTitle.radioSet)  }}#}
								{{ form_label(form.connaissanceEcole, 'Salon, lequel ? (Précise)', {'label_attr': {'class': 'container salon'}}) }}
							</div>
							<div class="champ-media">
								{#{{ form_widget(formTitle.radioSet)  }}#}
								{{ form_label(form.connaissanceEcole, 'Médias (Précise : presse, radio, cinéma, affiche... et quel support)', {'label_attr': {'class': 'container media'}}) }}
							</div>
							{{ form_end(form) }}
							<div class="container-button">
								<a class="lien precedent" href="/espl/dev/espl-symfo/public/index.php/formation/formation-1-mds">
									<button id="previous" class="btn-previous" type="button">Précédent</button>
								</a>
								<a class="lien sauvegarder" href="#">
									<button id="save" class="btn-save" type="button">Sauvegarder</button>
								</a>
								<a class="lien suivant" href="/espl/dev/espl-symfo/public/index.php/reponse_specifique/questions-prealables">
									<button id="suivant" class="btn-next" type="submit" name="button">Suivant</button>
								</a>
							</div>

						</div>
					</div>
				</div>
			{% include "footer.html.twig" %}
		</main>


	</body>

</html>
